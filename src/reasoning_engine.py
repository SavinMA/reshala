import os
from typing import List, Dict, Any, Tuple
from agents import ProblemAnalyzer, HypothesisAgent, SolutionAgent, ValidationAgent
from models import ProblemAnalysis, Hypothesis, Solution, ValidationResult
import asyncio
import logging


class ReasoningEngine:
    """–î–≤–∏–∂–æ–∫ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π, —É–ø—Ä–∞–≤–ª—è—é—â–∏–π —Ü–∏–∫–ª–æ–º –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, api_key: str):
        self.analyzer = ProblemAnalyzer(api_key)
        self.hypothesis_agent = HypothesisAgent(api_key)
        self.solution_agent = SolutionAgent(api_key)
        self.validation_agent = ValidationAgent(api_key)
        self.max_iterations = 5
        self.validity_threshold = float(os.getenv("VALIDITY_THRESHOLD_PERCENTAGE", "97"))/100 # Default to "97" if not set

        
    async def reason(self, user_question: str, progress_callback=None) -> Tuple[List[Dict[str, Any]], Solution]:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è
        
        Args:
            user_question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            progress_callback: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            Tuple[–∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –∞–≥–µ–Ω—Ç–æ–≤, —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ]
        """
        dialogue_history = []
        
        # –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã
        if progress_callback:
            await progress_callback("üîç *–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–æ–±–ª–µ–º—É...*")
            
        problem_analysis = self.analyzer.analyze(user_question)
        await asyncio.sleep(1) # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ –∞–≥–µ–Ω—Ç–∞–º
        
        analysis_message = f"""*–ê–Ω–∞–ª–∏—Ç–∏–∫:*
–ü—Ä–æ–±–ª–µ–º–∞: {problem_analysis.problem_statement}
–û–±–ª–∞—Å—Ç—å: {problem_analysis.problem_area}"""
        dialogue_history.append({"agent": "–ê–Ω–∞–ª–∏—Ç–∏–∫", "message": analysis_message})
        if progress_callback:
            await progress_callback(analysis_message)
        
        # –¶–∏–∫–ª —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π
        previous_attempts = []
        iteration = 0
        final_solution = None
        
        while iteration < self.max_iterations:
            iteration += 1
            
            # –®–∞–≥ 2: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥–∏–ø–æ—Ç–µ–∑—ã
            hypothesis = self.hypothesis_agent.build_hypothesis(problem_analysis, previous_attempts)
            await asyncio.sleep(1) # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ –∞–≥–µ–Ω—Ç–∞–º
            
            hypothesis_message = f"""*–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≥–∏–ø–æ—Ç–µ–∑:*
–ì–∏–ø–æ—Ç–µ–∑–∞: {hypothesis.hypothesis}
–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {hypothesis.confidence:.2f}"""
            dialogue_history.append({"agent": "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≥–∏–ø–æ—Ç–µ–∑", "message": hypothesis_message})
            if progress_callback:
                await progress_callback(hypothesis_message)
            
            # –®–∞–≥ 3: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
            solution = self.solution_agent.build_solution(problem_analysis, hypothesis)
            await asyncio.sleep(1) # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ –∞–≥–µ–Ω—Ç–∞–º
            
            solution_message = f"""*–†–µ—à–∞—Ç–µ–ª—å:*
–†–µ—à–µ–Ω–∏–µ: {solution.solution}
–®–∞–≥–∏:
""" + "\n".join([f"{i+1}. {step}" for i, step in enumerate(solution.steps)])
            dialogue_history.append({"agent": "–†–µ—à–∞—Ç–µ–ª—å", "message": solution_message})
            if progress_callback:
                await progress_callback(solution_message)
            
            # –®–∞–≥ 4: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è
            validation = self.validation_agent.validate_solution(problem_analysis, solution)
            await asyncio.sleep(1) # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ –∞–≥–µ–Ω—Ç–∞–º
            
            isValid = validation.confidence >= self.validity_threshold

            validation_message = f"""*–í–∞–ª–∏–¥–∞—Ç–æ—Ä:*
–í–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è: {validation.confidence*100:.0f}%: {'‚úÖ –†–µ—à–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ' if isValid else '‚ùå –†–µ—à–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏'}\n–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: {validation.feedback}"""
            dialogue_history.append({"agent": "–í–∞–ª–∏–¥–∞—Ç–æ—Ä", "message": validation_message})
            if progress_callback:
                await progress_callback(validation_message)
            
            if isValid:
                if progress_callback:
                    await progress_callback(f"‚úÖ *–†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –ø–æ—Å–ª–µ {iteration} –∏—Ç–µ—Ä–∞—Ü–∏–π!*")
                final_solution = solution
                break
            else:
                logging.info(f"–†–µ—à–µ–Ω–∏–µ –Ω–µ –≤–∞–ª–∏–¥–Ω–æ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {validation.confidence}). –ù–∞—Å—Ç—Ä–æ–π–∫–∞: {self.validity_threshold}")
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—ã—Ç–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                previous_attempts.append({
                    "hypothesis": hypothesis.hypothesis,
                    "feedback": validation.feedback,
                    "missing_aspects": validation.missing_aspects
                })
                
                #if progress_callback:
                #    await progress_callback(f"üîÑ *–†–µ—à–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏. –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏...*")
                    
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
                await asyncio.sleep(1)
        
        if not final_solution:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤–∞–ª–∏–¥–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞ max_iterations, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ
            final_solution = solution
            if progress_callback:
                await progress_callback(f"‚ö†Ô∏è *–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∏—Ç–µ—Ä–∞—Ü–∏–π. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ä–µ—à–µ–Ω–∏–µ.*")
        
        return dialogue_history, final_solution 